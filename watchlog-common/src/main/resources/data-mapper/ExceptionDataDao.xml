<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.netease.qa.log.meta.dao.ExceptionDataDao">
    
	<sql id="allColumn">
		exception_data_id as exceptionDataId,
		log_source_id as logSourceId,
		sample_time as sampleTime,
		exception_id as exceptionId,
		exception_count as exceptionCount
	</sql>
    
    <sql id="time_count">
        sample_time as sampleTime,
        sum(exception_count) as exceptionCount
    </sql>
    
      <sql id="exception_count">
        exception_id as exceptionId,
        sum(exception_count) as exceptionCount
    </sql>
    
    <sql id="unknown_exception_count">
        e.exception_id as exceptionId,
        sum(e.exception_count) as exceptionCount
    </sql>
    
    <sql id="record">
        aaa.sample_time as sampleTime,
        aaa.exception_id as exceptionIds,
        aaa.exception_count as exceptionCounts,
        bbb.total_count as totalCount
    </sql>
    
	<insert id="insert" parameterType="com.netease.qa.log.meta.ExceptionData"
		useGeneratedKeys="true" keyProperty="exceptionDataId">
		insert into exception_data(log_source_id, sample_time, exception_id, exception_count) 
		  values(#{logSourceId}, #{sampleTime}, #{exceptionId},#{exceptionCount})
	</insert>

	<delete id="delete" parameterType="java.lang.Integer">
		delete from exception_data where exception_data_id=#{exceptionDataId}
	</delete>

	<select id="findByExceptionDataId" parameterType="java.lang.Integer"
		resultType="com.netease.qa.log.meta.ExceptionData">
		select
		<include refid="allColumn" />
		from exception_data where exception_data_id=#{exceptionDataId}
	</select>
   
   <!-- 实时分析页面，返回起止时间内汇总数据，只有一条。 -->
  <select id="findSummaryByLogSourceIdAndTime" resultType="com.netease.qa.log.meta.ExceptionDataRecord">
         select  
         <include refid="record" />
         from 
                (select b.sample_time sample_time, group_concat(b.exception_id) exception_id, group_concat(b.sub_count) exception_count 
                     from (
                        select sample_time,exception_id,sum(exception_count) sub_count 
                            from exception_data where log_source_id=${param1} 
                            and sample_time between ${param2} and ${param3} 
                            group by exception_id  order by sample_time) b 
                ) aaa,
            (select sample_time,sum(exception_count) total_count from exception_data  where log_source_id=${param1}
             and sample_time between ${param2} and ${param3} order by sample_time
            ) bbb
        where aaa.sample_time = bbb.sample_time;
    </select> 
   
   
    <!-- 聚合分析页面，时间维度聚合，返回所有数据 -->
    <select id="findTimeRecordsByLogSourceIdAndTime" resultType="com.netease.qa.log.meta.ExceptionDataRecord">
         select  
         <include refid="record" />
         from 
                (select b.sample_time sample_time, group_concat(b.exception_id) exception_id, group_concat(b.sub_count) exception_count 
                     from (
                        select sample_time,exception_id,sum(exception_count) sub_count 
                            from exception_data where log_source_id=${param1} 
                            and sample_time between ${param2} and ${param3} 
                            group by sample_time,exception_id) b group by b.sample_time
                ) aaa,
            (select sample_time,sum(exception_count) total_count from exception_data  where log_source_id=${param1}
             and sample_time between ${param2} and ${param3}  
             group by sample_time ) bbb
        where aaa.sample_time = bbb.sample_time order by ${param4}  ${param5}  limit ${param6}  offset ${param7}  ;
    </select>
    
     <!-- 聚合分析页面，时间维度聚合，返回总数据量 -->
    <select id="getTimeRecordsCountByLogSourceIdAndTime" resultType="java.lang.Integer">
         select count(a.sample_time) from 
                (select distinct sample_time from exception_data where log_source_id=${param1} 
                and sample_time between ${param2} and ${param3} 
                group by log_source_id, sample_time ) a;
    </select>
   
   
      <!-- 聚合分析页面，异常维度聚合，返回所有数据 -->
    <select id="findErrorRecordsByLogSourceIdAndTime" resultType="com.netease.qa.log.meta.ExceptionData">
         select  
         <include refid="exception_count" />
         from exception_data where log_source_id=${param1} and sample_time between ${param2} and ${param3}  
         group by exception_id order by ${param4}  ${param5}  limit ${param6}  offset ${param7} ;
    </select>
    
      <!-- 聚合分析页面，异常维度聚合，返回特定异常类型   只有一条-->
    <select id="findUnknownTypeByLogSourceIdAndTime" resultType="com.netease.qa.log.meta.ExceptionData">
         select  
         <include refid="unknown_exception_count" />
         from exception_data e, (
         select exception_id, log_source_id from exception where log_source_id=${param1} and exception_type=#{3}
         ) a where e.log_source_id=a.log_source_id and e.exception_id=a.exception_id and sample_time between ${param2} and ${param3}  
         group by e.exception_id ;
    </select>
   
     <!-- 聚合分析页面，异常维度聚合，返回总数据量 -->
    <select id="getErrorRecordsCountByLogSourceIdAndTime" resultType="java.lang.Integer">
        select count(a.exception_id) from 
                (select distinct exception_id from exception_data where log_source_id=${param1} 
                and sample_time between ${param2} and ${param3}  
                group by exception_id) a;
    </select>  
   
   
    <!-- 聚合分析-异常类型详情"更多"页面 -->
    <select id="findErrorRecordsByLogSourceIdAndExceptionIdAndTime" resultType="com.netease.qa.log.meta.ExceptionData">
        select
        <include refid="time_count" /> 
        from exception_data  where log_source_id=${param1} and exception_id =${param2} 
        and sample_time between ${param3} and ${param4} 
        group by sample_time order by ${param5}  ${param6}  limit ${param7}  offset ${param8};
    </select>
    
    <!-- 聚合分析-异常类型详情"更多"页面，返回总数据量 -->
    <select id="getErrorRecordsCountByLogSourceIdAndExceptionIdAndTime" resultType="java.lang.Integer">
            select count(a.sample_time) from 
                (select distinct sample_time from exception_data  where log_source_id=${param1}  and exception_id =${param2}  
                 and sample_time between ${param3} and ${param4} 
                 group by sample_time) a;  
    </select>
    
</mapper>
